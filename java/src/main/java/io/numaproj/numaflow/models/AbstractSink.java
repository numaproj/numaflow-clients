/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.numaproj.numaflow.models.KafkaSink;
import io.numaproj.numaflow.models.UDSink;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * AbstractSink
 */
@JsonPropertyOrder({
  AbstractSink.JSON_PROPERTY_BLACKHOLE,
  AbstractSink.JSON_PROPERTY_KAFKA,
  AbstractSink.JSON_PROPERTY_LOG,
  AbstractSink.JSON_PROPERTY_UDSINK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class AbstractSink {
  public static final String JSON_PROPERTY_BLACKHOLE = "blackhole";
  private Object blackhole;

  public static final String JSON_PROPERTY_KAFKA = "kafka";
  private KafkaSink kafka;

  public static final String JSON_PROPERTY_LOG = "log";
  private Object log;

  public static final String JSON_PROPERTY_UDSINK = "udsink";
  private UDSink udsink;

  public AbstractSink() { 
  }

  public AbstractSink blackhole(Object blackhole) {
    this.blackhole = blackhole;
    return this;
  }

  /**
   * Blackhole is a sink to emulate /dev/null
   * @return blackhole
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLACKHOLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getBlackhole() {
    return blackhole;
  }


  @JsonProperty(JSON_PROPERTY_BLACKHOLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlackhole(Object blackhole) {
    this.blackhole = blackhole;
  }


  public AbstractSink kafka(KafkaSink kafka) {
    this.kafka = kafka;
    return this;
  }

  /**
   * Get kafka
   * @return kafka
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KAFKA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public KafkaSink getKafka() {
    return kafka;
  }


  @JsonProperty(JSON_PROPERTY_KAFKA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKafka(KafkaSink kafka) {
    this.kafka = kafka;
  }


  public AbstractSink log(Object log) {
    this.log = log;
    return this;
  }

  /**
   * Get log
   * @return log
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getLog() {
    return log;
  }


  @JsonProperty(JSON_PROPERTY_LOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLog(Object log) {
    this.log = log;
  }


  public AbstractSink udsink(UDSink udsink) {
    this.udsink = udsink;
    return this;
  }

  /**
   * Get udsink
   * @return udsink
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UDSINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UDSink getUdsink() {
    return udsink;
  }


  @JsonProperty(JSON_PROPERTY_UDSINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUdsink(UDSink udsink) {
    this.udsink = udsink;
  }


  /**
   * Return true if this AbstractSink object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractSink abstractSink = (AbstractSink) o;
    return Objects.equals(this.blackhole, abstractSink.blackhole) &&
        Objects.equals(this.kafka, abstractSink.kafka) &&
        Objects.equals(this.log, abstractSink.log) &&
        Objects.equals(this.udsink, abstractSink.udsink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackhole, kafka, log, udsink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractSink {\n");
    sb.append("    blackhole: ").append(toIndentedString(blackhole)).append("\n");
    sb.append("    kafka: ").append(toIndentedString(kafka)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    udsink: ").append(toIndentedString(udsink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `blackhole` to the URL query string
    if (getBlackhole() != null) {
      joiner.add(String.format("%sblackhole%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBlackhole()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `kafka` to the URL query string
    if (getKafka() != null) {
      joiner.add(getKafka().toUrlQueryString(prefix + "kafka" + suffix));
    }

    // add `log` to the URL query string
    if (getLog() != null) {
      joiner.add(String.format("%slog%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLog()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `udsink` to the URL query string
    if (getUdsink() != null) {
      joiner.add(getUdsink().toUrlQueryString(prefix + "udsink" + suffix));
    }

    return joiner.toString();
  }
}

