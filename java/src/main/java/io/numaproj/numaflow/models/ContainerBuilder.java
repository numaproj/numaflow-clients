/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kubernetes.client.openapi.models.V1ContainerPort;
import io.kubernetes.client.openapi.models.V1ContainerResizePolicy;
import io.kubernetes.client.openapi.models.V1EnvFromSource;
import io.kubernetes.client.openapi.models.V1EnvVar;
import io.kubernetes.client.openapi.models.V1Lifecycle;
import io.kubernetes.client.openapi.models.V1Probe;
import io.kubernetes.client.openapi.models.V1ResourceRequirements;
import io.kubernetes.client.openapi.models.V1SecurityContext;
import io.kubernetes.client.openapi.models.V1VolumeDevice;
import io.kubernetes.client.openapi.models.V1VolumeMount;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * ContainerBuilder
 */
@JsonPropertyOrder({
  ContainerBuilder.JSON_PROPERTY_ARGS,
  ContainerBuilder.JSON_PROPERTY_COMMAND,
  ContainerBuilder.JSON_PROPERTY_ENV,
  ContainerBuilder.JSON_PROPERTY_ENV_FROM,
  ContainerBuilder.JSON_PROPERTY_IMAGE,
  ContainerBuilder.JSON_PROPERTY_IMAGE_PULL_POLICY,
  ContainerBuilder.JSON_PROPERTY_LIFECYCLE,
  ContainerBuilder.JSON_PROPERTY_LIVENESS_PROBE,
  ContainerBuilder.JSON_PROPERTY_NAME,
  ContainerBuilder.JSON_PROPERTY_PORTS,
  ContainerBuilder.JSON_PROPERTY_READINESS_PROBE,
  ContainerBuilder.JSON_PROPERTY_RESIZE_POLICY,
  ContainerBuilder.JSON_PROPERTY_RESOURCES,
  ContainerBuilder.JSON_PROPERTY_RESTART_POLICY,
  ContainerBuilder.JSON_PROPERTY_SECURITY_CONTEXT,
  ContainerBuilder.JSON_PROPERTY_STARTUP_PROBE,
  ContainerBuilder.JSON_PROPERTY_STDIN,
  ContainerBuilder.JSON_PROPERTY_STDIN_ONCE,
  ContainerBuilder.JSON_PROPERTY_TERMINATION_MESSAGE_PATH,
  ContainerBuilder.JSON_PROPERTY_TERMINATION_MESSAGE_POLICY,
  ContainerBuilder.JSON_PROPERTY_TTY,
  ContainerBuilder.JSON_PROPERTY_VOLUME_DEVICES,
  ContainerBuilder.JSON_PROPERTY_VOLUME_MOUNTS,
  ContainerBuilder.JSON_PROPERTY_WORKING_DIR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class ContainerBuilder {
  public static final String JSON_PROPERTY_ARGS = "args";
  private List<String> args = new ArrayList<>();

  public static final String JSON_PROPERTY_COMMAND = "command";
  private List<String> command = new ArrayList<>();

  public static final String JSON_PROPERTY_ENV = "env";
  private List<V1EnvVar> env = new ArrayList<>();

  public static final String JSON_PROPERTY_ENV_FROM = "envFrom";
  private List<V1EnvFromSource> envFrom = new ArrayList<>();

  public static final String JSON_PROPERTY_IMAGE = "image";
  private String image;

  public static final String JSON_PROPERTY_IMAGE_PULL_POLICY = "imagePullPolicy";
  private String imagePullPolicy;

  public static final String JSON_PROPERTY_LIFECYCLE = "lifecycle";
  private V1Lifecycle lifecycle = null;

  public static final String JSON_PROPERTY_LIVENESS_PROBE = "livenessProbe";
  private V1Probe livenessProbe = null;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PORTS = "ports";
  private List<V1ContainerPort> ports = new ArrayList<>();

  public static final String JSON_PROPERTY_READINESS_PROBE = "readinessProbe";
  private V1Probe readinessProbe = null;

  public static final String JSON_PROPERTY_RESIZE_POLICY = "resizePolicy";
  private List<V1ContainerResizePolicy> resizePolicy = new ArrayList<>();

  public static final String JSON_PROPERTY_RESOURCES = "resources";
  private V1ResourceRequirements resources = null;

  public static final String JSON_PROPERTY_RESTART_POLICY = "restartPolicy";
  private String restartPolicy;

  public static final String JSON_PROPERTY_SECURITY_CONTEXT = "securityContext";
  private V1SecurityContext securityContext = null;

  public static final String JSON_PROPERTY_STARTUP_PROBE = "startupProbe";
  private V1Probe startupProbe = null;

  public static final String JSON_PROPERTY_STDIN = "stdin";
  private Boolean stdin;

  public static final String JSON_PROPERTY_STDIN_ONCE = "stdinOnce";
  private Boolean stdinOnce;

  public static final String JSON_PROPERTY_TERMINATION_MESSAGE_PATH = "terminationMessagePath";
  private String terminationMessagePath;

  public static final String JSON_PROPERTY_TERMINATION_MESSAGE_POLICY = "terminationMessagePolicy";
  private String terminationMessagePolicy;

  public static final String JSON_PROPERTY_TTY = "tty";
  private Boolean tty;

  public static final String JSON_PROPERTY_VOLUME_DEVICES = "volumeDevices";
  private List<V1VolumeDevice> volumeDevices = new ArrayList<>();

  public static final String JSON_PROPERTY_VOLUME_MOUNTS = "volumeMounts";
  private List<V1VolumeMount> volumeMounts = new ArrayList<>();

  public static final String JSON_PROPERTY_WORKING_DIR = "workingDir";
  private String workingDir;

  public ContainerBuilder() { 
  }

  public ContainerBuilder args(List<String> args) {
    this.args = args;
    return this;
  }

  public ContainerBuilder addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Arguments to the entrypoint. The container image&#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \&quot;$$(VAR_NAME)\&quot; will produce the string literal \&quot;$(VAR_NAME)\&quot;. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   * @return args
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getArgs() {
    return args;
  }


  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArgs(List<String> args) {
    this.args = args;
  }


  public ContainerBuilder command(List<String> command) {
    this.command = command;
    return this;
  }

  public ContainerBuilder addCommandItem(String commandItem) {
    if (this.command == null) {
      this.command = new ArrayList<>();
    }
    this.command.add(commandItem);
    return this;
  }

  /**
   * Entrypoint array. Not executed within a shell. The container image&#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \&quot;$$(VAR_NAME)\&quot; will produce the string literal \&quot;$(VAR_NAME)\&quot;. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   * @return command
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCommand() {
    return command;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommand(List<String> command) {
    this.command = command;
  }


  public ContainerBuilder env(List<V1EnvVar> env) {
    this.env = env;
    return this;
  }

  public ContainerBuilder addEnvItem(V1EnvVar envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * List of environment variables to set in the container. Cannot be updated.
   * @return env
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<V1EnvVar> getEnv() {
    return env;
  }


  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnv(List<V1EnvVar> env) {
    this.env = env;
  }


  public ContainerBuilder envFrom(List<V1EnvFromSource> envFrom) {
    this.envFrom = envFrom;
    return this;
  }

  public ContainerBuilder addEnvFromItem(V1EnvFromSource envFromItem) {
    if (this.envFrom == null) {
      this.envFrom = new ArrayList<>();
    }
    this.envFrom.add(envFromItem);
    return this;
  }

  /**
   * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
   * @return envFrom
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENV_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<V1EnvFromSource> getEnvFrom() {
    return envFrom;
  }


  @JsonProperty(JSON_PROPERTY_ENV_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnvFrom(List<V1EnvFromSource> envFrom) {
    this.envFrom = envFrom;
  }


  public ContainerBuilder image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
   * @return image
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public ContainerBuilder imagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

  /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @return imagePullPolicy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE_PULL_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImagePullPolicy() {
    return imagePullPolicy;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_PULL_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public ContainerBuilder lifecycle(V1Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
    return this;
  }

  /**
   * Get lifecycle
   * @return lifecycle
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIFECYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public V1Lifecycle getLifecycle() {
    return lifecycle;
  }


  @JsonProperty(JSON_PROPERTY_LIFECYCLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLifecycle(V1Lifecycle lifecycle) {
    this.lifecycle = lifecycle;
  }


  public ContainerBuilder livenessProbe(V1Probe livenessProbe) {
    this.livenessProbe = livenessProbe;
    return this;
  }

  /**
   * Get livenessProbe
   * @return livenessProbe
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIVENESS_PROBE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public V1Probe getLivenessProbe() {
    return livenessProbe;
  }


  @JsonProperty(JSON_PROPERTY_LIVENESS_PROBE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLivenessProbe(V1Probe livenessProbe) {
    this.livenessProbe = livenessProbe;
  }


  public ContainerBuilder name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ContainerBuilder ports(List<V1ContainerPort> ports) {
    this.ports = ports;
    return this;
  }

  public ContainerBuilder addPortsItem(V1ContainerPort portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

  /**
   * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \&quot;0.0.0.0\&quot; address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
   * @return ports
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<V1ContainerPort> getPorts() {
    return ports;
  }


  @JsonProperty(JSON_PROPERTY_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPorts(List<V1ContainerPort> ports) {
    this.ports = ports;
  }


  public ContainerBuilder readinessProbe(V1Probe readinessProbe) {
    this.readinessProbe = readinessProbe;
    return this;
  }

  /**
   * Get readinessProbe
   * @return readinessProbe
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_READINESS_PROBE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public V1Probe getReadinessProbe() {
    return readinessProbe;
  }


  @JsonProperty(JSON_PROPERTY_READINESS_PROBE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadinessProbe(V1Probe readinessProbe) {
    this.readinessProbe = readinessProbe;
  }


  public ContainerBuilder resizePolicy(List<V1ContainerResizePolicy> resizePolicy) {
    this.resizePolicy = resizePolicy;
    return this;
  }

  public ContainerBuilder addResizePolicyItem(V1ContainerResizePolicy resizePolicyItem) {
    if (this.resizePolicy == null) {
      this.resizePolicy = new ArrayList<>();
    }
    this.resizePolicy.add(resizePolicyItem);
    return this;
  }

  /**
   * Resources resize policy for the container.
   * @return resizePolicy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESIZE_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<V1ContainerResizePolicy> getResizePolicy() {
    return resizePolicy;
  }


  @JsonProperty(JSON_PROPERTY_RESIZE_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResizePolicy(List<V1ContainerResizePolicy> resizePolicy) {
    this.resizePolicy = resizePolicy;
  }


  public ContainerBuilder resources(V1ResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public V1ResourceRequirements getResources() {
    return resources;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResources(V1ResourceRequirements resources) {
    this.resources = resources;
  }


  public ContainerBuilder restartPolicy(String restartPolicy) {
    this.restartPolicy = restartPolicy;
    return this;
  }

  /**
   * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \&quot;Always\&quot;. For non-init containers or when this field is not specified, the restart behavior is defined by the Pod&#39;s restart policy and the container type. Setting the RestartPolicy as \&quot;Always\&quot; for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \&quot;Always\&quot; will be shut down. This lifecycle differs from normal init containers and is often referred to as a \&quot;sidecar\&quot; container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
   * @return restartPolicy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESTART_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRestartPolicy() {
    return restartPolicy;
  }


  @JsonProperty(JSON_PROPERTY_RESTART_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestartPolicy(String restartPolicy) {
    this.restartPolicy = restartPolicy;
  }


  public ContainerBuilder securityContext(V1SecurityContext securityContext) {
    this.securityContext = securityContext;
    return this;
  }

  /**
   * Get securityContext
   * @return securityContext
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public V1SecurityContext getSecurityContext() {
    return securityContext;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityContext(V1SecurityContext securityContext) {
    this.securityContext = securityContext;
  }


  public ContainerBuilder startupProbe(V1Probe startupProbe) {
    this.startupProbe = startupProbe;
    return this;
  }

  /**
   * Get startupProbe
   * @return startupProbe
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STARTUP_PROBE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public V1Probe getStartupProbe() {
    return startupProbe;
  }


  @JsonProperty(JSON_PROPERTY_STARTUP_PROBE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartupProbe(V1Probe startupProbe) {
    this.startupProbe = startupProbe;
  }


  public ContainerBuilder stdin(Boolean stdin) {
    this.stdin = stdin;
    return this;
  }

  /**
   * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
   * @return stdin
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStdin() {
    return stdin;
  }


  @JsonProperty(JSON_PROPERTY_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdin(Boolean stdin) {
    this.stdin = stdin;
  }


  public ContainerBuilder stdinOnce(Boolean stdinOnce) {
    this.stdinOnce = stdinOnce;
    return this;
  }

  /**
   * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
   * @return stdinOnce
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STDIN_ONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStdinOnce() {
    return stdinOnce;
  }


  @JsonProperty(JSON_PROPERTY_STDIN_ONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdinOnce(Boolean stdinOnce) {
    this.stdinOnce = stdinOnce;
  }


  public ContainerBuilder terminationMessagePath(String terminationMessagePath) {
    this.terminationMessagePath = terminationMessagePath;
    return this;
  }

  /**
   * Optional: Path at which the file to which the container&#39;s termination message will be written is mounted into the container&#39;s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
   * @return terminationMessagePath
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINATION_MESSAGE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTerminationMessagePath() {
    return terminationMessagePath;
  }


  @JsonProperty(JSON_PROPERTY_TERMINATION_MESSAGE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminationMessagePath(String terminationMessagePath) {
    this.terminationMessagePath = terminationMessagePath;
  }


  public ContainerBuilder terminationMessagePolicy(String terminationMessagePolicy) {
    this.terminationMessagePolicy = terminationMessagePolicy;
    return this;
  }

  /**
   * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
   * @return terminationMessagePolicy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINATION_MESSAGE_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTerminationMessagePolicy() {
    return terminationMessagePolicy;
  }


  @JsonProperty(JSON_PROPERTY_TERMINATION_MESSAGE_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminationMessagePolicy(String terminationMessagePolicy) {
    this.terminationMessagePolicy = terminationMessagePolicy;
  }


  public ContainerBuilder tty(Boolean tty) {
    this.tty = tty;
    return this;
  }

  /**
   * Whether this container should allocate a TTY for itself, also requires &#39;stdin&#39; to be true. Default is false.
   * @return tty
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTty() {
    return tty;
  }


  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTty(Boolean tty) {
    this.tty = tty;
  }


  public ContainerBuilder volumeDevices(List<V1VolumeDevice> volumeDevices) {
    this.volumeDevices = volumeDevices;
    return this;
  }

  public ContainerBuilder addVolumeDevicesItem(V1VolumeDevice volumeDevicesItem) {
    if (this.volumeDevices == null) {
      this.volumeDevices = new ArrayList<>();
    }
    this.volumeDevices.add(volumeDevicesItem);
    return this;
  }

  /**
   * volumeDevices is the list of block devices to be used by the container.
   * @return volumeDevices
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VOLUME_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<V1VolumeDevice> getVolumeDevices() {
    return volumeDevices;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumeDevices(List<V1VolumeDevice> volumeDevices) {
    this.volumeDevices = volumeDevices;
  }


  public ContainerBuilder volumeMounts(List<V1VolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
    return this;
  }

  public ContainerBuilder addVolumeMountsItem(V1VolumeMount volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

  /**
   * Pod volumes to mount into the container&#39;s filesystem. Cannot be updated.
   * @return volumeMounts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VOLUME_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<V1VolumeMount> getVolumeMounts() {
    return volumeMounts;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumeMounts(List<V1VolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }


  public ContainerBuilder workingDir(String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

  /**
   * Container&#39;s working directory. If not specified, the container runtime&#39;s default will be used, which might be configured in the container image. Cannot be updated.
   * @return workingDir
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getWorkingDir() {
    return workingDir;
  }


  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }


  /**
   * Return true if this containerBuilder object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerBuilder containerBuilder = (ContainerBuilder) o;
    return Objects.equals(this.args, containerBuilder.args) &&
        Objects.equals(this.command, containerBuilder.command) &&
        Objects.equals(this.env, containerBuilder.env) &&
        Objects.equals(this.envFrom, containerBuilder.envFrom) &&
        Objects.equals(this.image, containerBuilder.image) &&
        Objects.equals(this.imagePullPolicy, containerBuilder.imagePullPolicy) &&
        Objects.equals(this.lifecycle, containerBuilder.lifecycle) &&
        Objects.equals(this.livenessProbe, containerBuilder.livenessProbe) &&
        Objects.equals(this.name, containerBuilder.name) &&
        Objects.equals(this.ports, containerBuilder.ports) &&
        Objects.equals(this.readinessProbe, containerBuilder.readinessProbe) &&
        Objects.equals(this.resizePolicy, containerBuilder.resizePolicy) &&
        Objects.equals(this.resources, containerBuilder.resources) &&
        Objects.equals(this.restartPolicy, containerBuilder.restartPolicy) &&
        Objects.equals(this.securityContext, containerBuilder.securityContext) &&
        Objects.equals(this.startupProbe, containerBuilder.startupProbe) &&
        Objects.equals(this.stdin, containerBuilder.stdin) &&
        Objects.equals(this.stdinOnce, containerBuilder.stdinOnce) &&
        Objects.equals(this.terminationMessagePath, containerBuilder.terminationMessagePath) &&
        Objects.equals(this.terminationMessagePolicy, containerBuilder.terminationMessagePolicy) &&
        Objects.equals(this.tty, containerBuilder.tty) &&
        Objects.equals(this.volumeDevices, containerBuilder.volumeDevices) &&
        Objects.equals(this.volumeMounts, containerBuilder.volumeMounts) &&
        Objects.equals(this.workingDir, containerBuilder.workingDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, command, env, envFrom, image, imagePullPolicy, lifecycle, livenessProbe, name, ports, readinessProbe, resizePolicy, resources, restartPolicy, securityContext, startupProbe, stdin, stdinOnce, terminationMessagePath, terminationMessagePolicy, tty, volumeDevices, volumeMounts, workingDir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerBuilder {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    envFrom: ").append(toIndentedString(envFrom)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    lifecycle: ").append(toIndentedString(lifecycle)).append("\n");
    sb.append("    livenessProbe: ").append(toIndentedString(livenessProbe)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    readinessProbe: ").append(toIndentedString(readinessProbe)).append("\n");
    sb.append("    resizePolicy: ").append(toIndentedString(resizePolicy)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    restartPolicy: ").append(toIndentedString(restartPolicy)).append("\n");
    sb.append("    securityContext: ").append(toIndentedString(securityContext)).append("\n");
    sb.append("    startupProbe: ").append(toIndentedString(startupProbe)).append("\n");
    sb.append("    stdin: ").append(toIndentedString(stdin)).append("\n");
    sb.append("    stdinOnce: ").append(toIndentedString(stdinOnce)).append("\n");
    sb.append("    terminationMessagePath: ").append(toIndentedString(terminationMessagePath)).append("\n");
    sb.append("    terminationMessagePolicy: ").append(toIndentedString(terminationMessagePolicy)).append("\n");
    sb.append("    tty: ").append(toIndentedString(tty)).append("\n");
    sb.append("    volumeDevices: ").append(toIndentedString(volumeDevices)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `args` to the URL query string
    if (getArgs() != null) {
      for (int i = 0; i < getArgs().size(); i++) {
        joiner.add(String.format("%sargs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getArgs().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `command` to the URL query string
    if (getCommand() != null) {
      for (int i = 0; i < getCommand().size(); i++) {
        joiner.add(String.format("%scommand%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCommand().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `env` to the URL query string
    if (getEnv() != null) {
      for (int i = 0; i < getEnv().size(); i++) {
        if (getEnv().get(i) != null) {
          joiner.add(String.format("%senv%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getEnv().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `envFrom` to the URL query string
    if (getEnvFrom() != null) {
      for (int i = 0; i < getEnvFrom().size(); i++) {
        if (getEnvFrom().get(i) != null) {
          joiner.add(String.format("%senvFrom%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getEnvFrom().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%simage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `imagePullPolicy` to the URL query string
    if (getImagePullPolicy() != null) {
      joiner.add(String.format("%simagePullPolicy%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImagePullPolicy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `lifecycle` to the URL query string
    if (getLifecycle() != null) {
      joiner.add(String.format("%slifecycle%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLifecycle()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `livenessProbe` to the URL query string
    if (getLivenessProbe() != null) {
      joiner.add(String.format("%slivenessProbe%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLivenessProbe()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ports` to the URL query string
    if (getPorts() != null) {
      for (int i = 0; i < getPorts().size(); i++) {
        if (getPorts().get(i) != null) {
          joiner.add(String.format("%sports%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getPorts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `readinessProbe` to the URL query string
    if (getReadinessProbe() != null) {
      joiner.add(String.format("%sreadinessProbe%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReadinessProbe()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `resizePolicy` to the URL query string
    if (getResizePolicy() != null) {
      for (int i = 0; i < getResizePolicy().size(); i++) {
        if (getResizePolicy().get(i) != null) {
          joiner.add(String.format("%sresizePolicy%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getResizePolicy().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `resources` to the URL query string
    if (getResources() != null) {
      joiner.add(String.format("%sresources%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getResources()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `restartPolicy` to the URL query string
    if (getRestartPolicy() != null) {
      joiner.add(String.format("%srestartPolicy%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRestartPolicy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `securityContext` to the URL query string
    if (getSecurityContext() != null) {
      joiner.add(String.format("%ssecurityContext%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSecurityContext()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `startupProbe` to the URL query string
    if (getStartupProbe() != null) {
      joiner.add(String.format("%sstartupProbe%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartupProbe()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `stdin` to the URL query string
    if (getStdin() != null) {
      joiner.add(String.format("%sstdin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStdin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `stdinOnce` to the URL query string
    if (getStdinOnce() != null) {
      joiner.add(String.format("%sstdinOnce%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStdinOnce()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `terminationMessagePath` to the URL query string
    if (getTerminationMessagePath() != null) {
      joiner.add(String.format("%sterminationMessagePath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTerminationMessagePath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `terminationMessagePolicy` to the URL query string
    if (getTerminationMessagePolicy() != null) {
      joiner.add(String.format("%sterminationMessagePolicy%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTerminationMessagePolicy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tty` to the URL query string
    if (getTty() != null) {
      joiner.add(String.format("%stty%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTty()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `volumeDevices` to the URL query string
    if (getVolumeDevices() != null) {
      for (int i = 0; i < getVolumeDevices().size(); i++) {
        if (getVolumeDevices().get(i) != null) {
          joiner.add(String.format("%svolumeDevices%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getVolumeDevices().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `volumeMounts` to the URL query string
    if (getVolumeMounts() != null) {
      for (int i = 0; i < getVolumeMounts().size(); i++) {
        if (getVolumeMounts().get(i) != null) {
          joiner.add(String.format("%svolumeMounts%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getVolumeMounts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `workingDir` to the URL query string
    if (getWorkingDir() != null) {
      joiner.add(String.format("%sworkingDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkingDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

