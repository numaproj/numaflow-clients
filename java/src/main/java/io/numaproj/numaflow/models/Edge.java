/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.numaproj.numaflow.models.ForwardConditions;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * Edge
 */
@JsonPropertyOrder({
  Edge.JSON_PROPERTY_CONDITIONS,
  Edge.JSON_PROPERTY_FROM,
  Edge.JSON_PROPERTY_ON_FULL,
  Edge.JSON_PROPERTY_TO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Edge {
  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  private ForwardConditions conditions;

  public static final String JSON_PROPERTY_FROM = "from";
  private String from;

  public static final String JSON_PROPERTY_ON_FULL = "onFull";
  private String onFull;

  public static final String JSON_PROPERTY_TO = "to";
  private String to;

  public Edge() { 
  }

  public Edge conditions(ForwardConditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ForwardConditions getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditions(ForwardConditions conditions) {
    this.conditions = conditions;
  }


  public Edge from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrom(String from) {
    this.from = from;
  }


  public Edge onFull(String onFull) {
    this.onFull = onFull;
    return this;
  }

  /**
   * OnFull specifies the behaviour for the write actions when the inter step buffer is full. There are currently two options, retryUntilSuccess and discardLatest. if not provided, the default value is set to \&quot;retryUntilSuccess\&quot;
   * @return onFull
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ON_FULL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOnFull() {
    return onFull;
  }


  @JsonProperty(JSON_PROPERTY_ON_FULL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnFull(String onFull) {
    this.onFull = onFull;
  }


  public Edge to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTo(String to) {
    this.to = to;
  }


  /**
   * Return true if this Edge object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Edge edge = (Edge) o;
    return Objects.equals(this.conditions, edge.conditions) &&
        Objects.equals(this.from, edge.from) &&
        Objects.equals(this.onFull, edge.onFull) &&
        Objects.equals(this.to, edge.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, from, onFull, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Edge {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    onFull: ").append(toIndentedString(onFull)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `conditions` to the URL query string
    if (getConditions() != null) {
      joiner.add(getConditions().toUrlQueryString(prefix + "conditions" + suffix));
    }

    // add `from` to the URL query string
    if (getFrom() != null) {
      joiner.add(String.format("%sfrom%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getFrom()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `onFull` to the URL query string
    if (getOnFull() != null) {
      joiner.add(String.format("%sonFull%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOnFull()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `to` to the URL query string
    if (getTo() != null) {
      joiner.add(String.format("%sto%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTo()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

