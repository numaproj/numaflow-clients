/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kubernetes.client.openapi.models.V1ResourceRequirements;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * GetJetStreamStatefulSetSpecReq
 */
@JsonPropertyOrder({
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_CLIENT_PORT,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_CLUSTER_PORT,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_CONFIG_MAP_NAME,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_CONFIG_RELOADER_IMAGE,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_DEFAULT_RESOURCES,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_LABELS,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_METRICS_EXPORTER_IMAGE,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_METRICS_PORT,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_MONITOR_PORT,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_NATS_IMAGE,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_PVC_NAME_IF_NEEDED,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_SERVER_AUTH_SECRET_NAME,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_SERVER_ENCRYPTION_SECRET_NAME,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_SERVICE_NAME,
  GetJetStreamStatefulSetSpecReq.JSON_PROPERTY_START_COMMAND
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class GetJetStreamStatefulSetSpecReq {
  public static final String JSON_PROPERTY_CLIENT_PORT = "ClientPort";
  private Integer clientPort;

  public static final String JSON_PROPERTY_CLUSTER_PORT = "ClusterPort";
  private Integer clusterPort;

  public static final String JSON_PROPERTY_CONFIG_MAP_NAME = "ConfigMapName";
  private String configMapName;

  public static final String JSON_PROPERTY_CONFIG_RELOADER_IMAGE = "ConfigReloaderImage";
  private String configReloaderImage;

  public static final String JSON_PROPERTY_DEFAULT_RESOURCES = "DefaultResources";
  private V1ResourceRequirements defaultResources = null;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_METRICS_EXPORTER_IMAGE = "MetricsExporterImage";
  private String metricsExporterImage;

  public static final String JSON_PROPERTY_METRICS_PORT = "MetricsPort";
  private Integer metricsPort;

  public static final String JSON_PROPERTY_MONITOR_PORT = "MonitorPort";
  private Integer monitorPort;

  public static final String JSON_PROPERTY_NATS_IMAGE = "NatsImage";
  private String natsImage;

  public static final String JSON_PROPERTY_PVC_NAME_IF_NEEDED = "PvcNameIfNeeded";
  private String pvcNameIfNeeded;

  public static final String JSON_PROPERTY_SERVER_AUTH_SECRET_NAME = "ServerAuthSecretName";
  private String serverAuthSecretName;

  public static final String JSON_PROPERTY_SERVER_ENCRYPTION_SECRET_NAME = "ServerEncryptionSecretName";
  private String serverEncryptionSecretName;

  public static final String JSON_PROPERTY_SERVICE_NAME = "ServiceName";
  private String serviceName;

  public static final String JSON_PROPERTY_START_COMMAND = "StartCommand";
  private String startCommand;

  public GetJetStreamStatefulSetSpecReq() { 
  }

  public GetJetStreamStatefulSetSpecReq clientPort(Integer clientPort) {
    this.clientPort = clientPort;
    return this;
  }

  /**
   * Get clientPort
   * @return clientPort
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLIENT_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getClientPort() {
    return clientPort;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientPort(Integer clientPort) {
    this.clientPort = clientPort;
  }


  public GetJetStreamStatefulSetSpecReq clusterPort(Integer clusterPort) {
    this.clusterPort = clusterPort;
    return this;
  }

  /**
   * Get clusterPort
   * @return clusterPort
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLUSTER_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getClusterPort() {
    return clusterPort;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClusterPort(Integer clusterPort) {
    this.clusterPort = clusterPort;
  }


  public GetJetStreamStatefulSetSpecReq configMapName(String configMapName) {
    this.configMapName = configMapName;
    return this;
  }

  /**
   * Get configMapName
   * @return configMapName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIG_MAP_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getConfigMapName() {
    return configMapName;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_MAP_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigMapName(String configMapName) {
    this.configMapName = configMapName;
  }


  public GetJetStreamStatefulSetSpecReq configReloaderImage(String configReloaderImage) {
    this.configReloaderImage = configReloaderImage;
    return this;
  }

  /**
   * Get configReloaderImage
   * @return configReloaderImage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFIG_RELOADER_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getConfigReloaderImage() {
    return configReloaderImage;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_RELOADER_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfigReloaderImage(String configReloaderImage) {
    this.configReloaderImage = configReloaderImage;
  }


  public GetJetStreamStatefulSetSpecReq defaultResources(V1ResourceRequirements defaultResources) {
    this.defaultResources = defaultResources;
    return this;
  }

  /**
   * Get defaultResources
   * @return defaultResources
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEFAULT_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public V1ResourceRequirements getDefaultResources() {
    return defaultResources;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDefaultResources(V1ResourceRequirements defaultResources) {
    this.defaultResources = defaultResources;
  }


  public GetJetStreamStatefulSetSpecReq labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GetJetStreamStatefulSetSpecReq putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public GetJetStreamStatefulSetSpecReq metricsExporterImage(String metricsExporterImage) {
    this.metricsExporterImage = metricsExporterImage;
    return this;
  }

  /**
   * Get metricsExporterImage
   * @return metricsExporterImage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METRICS_EXPORTER_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getMetricsExporterImage() {
    return metricsExporterImage;
  }


  @JsonProperty(JSON_PROPERTY_METRICS_EXPORTER_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricsExporterImage(String metricsExporterImage) {
    this.metricsExporterImage = metricsExporterImage;
  }


  public GetJetStreamStatefulSetSpecReq metricsPort(Integer metricsPort) {
    this.metricsPort = metricsPort;
    return this;
  }

  /**
   * Get metricsPort
   * @return metricsPort
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METRICS_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getMetricsPort() {
    return metricsPort;
  }


  @JsonProperty(JSON_PROPERTY_METRICS_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricsPort(Integer metricsPort) {
    this.metricsPort = metricsPort;
  }


  public GetJetStreamStatefulSetSpecReq monitorPort(Integer monitorPort) {
    this.monitorPort = monitorPort;
    return this;
  }

  /**
   * Get monitorPort
   * @return monitorPort
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MONITOR_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getMonitorPort() {
    return monitorPort;
  }


  @JsonProperty(JSON_PROPERTY_MONITOR_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMonitorPort(Integer monitorPort) {
    this.monitorPort = monitorPort;
  }


  public GetJetStreamStatefulSetSpecReq natsImage(String natsImage) {
    this.natsImage = natsImage;
    return this;
  }

  /**
   * Get natsImage
   * @return natsImage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NATS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getNatsImage() {
    return natsImage;
  }


  @JsonProperty(JSON_PROPERTY_NATS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNatsImage(String natsImage) {
    this.natsImage = natsImage;
  }


  public GetJetStreamStatefulSetSpecReq pvcNameIfNeeded(String pvcNameIfNeeded) {
    this.pvcNameIfNeeded = pvcNameIfNeeded;
    return this;
  }

  /**
   * Get pvcNameIfNeeded
   * @return pvcNameIfNeeded
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PVC_NAME_IF_NEEDED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPvcNameIfNeeded() {
    return pvcNameIfNeeded;
  }


  @JsonProperty(JSON_PROPERTY_PVC_NAME_IF_NEEDED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPvcNameIfNeeded(String pvcNameIfNeeded) {
    this.pvcNameIfNeeded = pvcNameIfNeeded;
  }


  public GetJetStreamStatefulSetSpecReq serverAuthSecretName(String serverAuthSecretName) {
    this.serverAuthSecretName = serverAuthSecretName;
    return this;
  }

  /**
   * Get serverAuthSecretName
   * @return serverAuthSecretName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERVER_AUTH_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getServerAuthSecretName() {
    return serverAuthSecretName;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_AUTH_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServerAuthSecretName(String serverAuthSecretName) {
    this.serverAuthSecretName = serverAuthSecretName;
  }


  public GetJetStreamStatefulSetSpecReq serverEncryptionSecretName(String serverEncryptionSecretName) {
    this.serverEncryptionSecretName = serverEncryptionSecretName;
    return this;
  }

  /**
   * Get serverEncryptionSecretName
   * @return serverEncryptionSecretName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERVER_ENCRYPTION_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getServerEncryptionSecretName() {
    return serverEncryptionSecretName;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_ENCRYPTION_SECRET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServerEncryptionSecretName(String serverEncryptionSecretName) {
    this.serverEncryptionSecretName = serverEncryptionSecretName;
  }


  public GetJetStreamStatefulSetSpecReq serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERVICE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getServiceName() {
    return serviceName;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public GetJetStreamStatefulSetSpecReq startCommand(String startCommand) {
    this.startCommand = startCommand;
    return this;
  }

  /**
   * Get startCommand
   * @return startCommand
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_COMMAND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getStartCommand() {
    return startCommand;
  }


  @JsonProperty(JSON_PROPERTY_START_COMMAND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartCommand(String startCommand) {
    this.startCommand = startCommand;
  }


  /**
   * Return true if this GetJetStreamStatefulSetSpecReq object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetJetStreamStatefulSetSpecReq getJetStreamStatefulSetSpecReq = (GetJetStreamStatefulSetSpecReq) o;
    return Objects.equals(this.clientPort, getJetStreamStatefulSetSpecReq.clientPort) &&
        Objects.equals(this.clusterPort, getJetStreamStatefulSetSpecReq.clusterPort) &&
        Objects.equals(this.configMapName, getJetStreamStatefulSetSpecReq.configMapName) &&
        Objects.equals(this.configReloaderImage, getJetStreamStatefulSetSpecReq.configReloaderImage) &&
        Objects.equals(this.defaultResources, getJetStreamStatefulSetSpecReq.defaultResources) &&
        Objects.equals(this.labels, getJetStreamStatefulSetSpecReq.labels) &&
        Objects.equals(this.metricsExporterImage, getJetStreamStatefulSetSpecReq.metricsExporterImage) &&
        Objects.equals(this.metricsPort, getJetStreamStatefulSetSpecReq.metricsPort) &&
        Objects.equals(this.monitorPort, getJetStreamStatefulSetSpecReq.monitorPort) &&
        Objects.equals(this.natsImage, getJetStreamStatefulSetSpecReq.natsImage) &&
        Objects.equals(this.pvcNameIfNeeded, getJetStreamStatefulSetSpecReq.pvcNameIfNeeded) &&
        Objects.equals(this.serverAuthSecretName, getJetStreamStatefulSetSpecReq.serverAuthSecretName) &&
        Objects.equals(this.serverEncryptionSecretName, getJetStreamStatefulSetSpecReq.serverEncryptionSecretName) &&
        Objects.equals(this.serviceName, getJetStreamStatefulSetSpecReq.serviceName) &&
        Objects.equals(this.startCommand, getJetStreamStatefulSetSpecReq.startCommand);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientPort, clusterPort, configMapName, configReloaderImage, defaultResources, labels, metricsExporterImage, metricsPort, monitorPort, natsImage, pvcNameIfNeeded, serverAuthSecretName, serverEncryptionSecretName, serviceName, startCommand);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetJetStreamStatefulSetSpecReq {\n");
    sb.append("    clientPort: ").append(toIndentedString(clientPort)).append("\n");
    sb.append("    clusterPort: ").append(toIndentedString(clusterPort)).append("\n");
    sb.append("    configMapName: ").append(toIndentedString(configMapName)).append("\n");
    sb.append("    configReloaderImage: ").append(toIndentedString(configReloaderImage)).append("\n");
    sb.append("    defaultResources: ").append(toIndentedString(defaultResources)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    metricsExporterImage: ").append(toIndentedString(metricsExporterImage)).append("\n");
    sb.append("    metricsPort: ").append(toIndentedString(metricsPort)).append("\n");
    sb.append("    monitorPort: ").append(toIndentedString(monitorPort)).append("\n");
    sb.append("    natsImage: ").append(toIndentedString(natsImage)).append("\n");
    sb.append("    pvcNameIfNeeded: ").append(toIndentedString(pvcNameIfNeeded)).append("\n");
    sb.append("    serverAuthSecretName: ").append(toIndentedString(serverAuthSecretName)).append("\n");
    sb.append("    serverEncryptionSecretName: ").append(toIndentedString(serverEncryptionSecretName)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    startCommand: ").append(toIndentedString(startCommand)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ClientPort` to the URL query string
    if (getClientPort() != null) {
      joiner.add(String.format("%sClientPort%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getClientPort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ClusterPort` to the URL query string
    if (getClusterPort() != null) {
      joiner.add(String.format("%sClusterPort%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getClusterPort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ConfigMapName` to the URL query string
    if (getConfigMapName() != null) {
      joiner.add(String.format("%sConfigMapName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConfigMapName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ConfigReloaderImage` to the URL query string
    if (getConfigReloaderImage() != null) {
      joiner.add(String.format("%sConfigReloaderImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConfigReloaderImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `DefaultResources` to the URL query string
    if (getDefaultResources() != null) {
      joiner.add(String.format("%sDefaultResources%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDefaultResources()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `MetricsExporterImage` to the URL query string
    if (getMetricsExporterImage() != null) {
      joiner.add(String.format("%sMetricsExporterImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMetricsExporterImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `MetricsPort` to the URL query string
    if (getMetricsPort() != null) {
      joiner.add(String.format("%sMetricsPort%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMetricsPort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `MonitorPort` to the URL query string
    if (getMonitorPort() != null) {
      joiner.add(String.format("%sMonitorPort%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMonitorPort()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `NatsImage` to the URL query string
    if (getNatsImage() != null) {
      joiner.add(String.format("%sNatsImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNatsImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `PvcNameIfNeeded` to the URL query string
    if (getPvcNameIfNeeded() != null) {
      joiner.add(String.format("%sPvcNameIfNeeded%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPvcNameIfNeeded()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ServerAuthSecretName` to the URL query string
    if (getServerAuthSecretName() != null) {
      joiner.add(String.format("%sServerAuthSecretName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getServerAuthSecretName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ServerEncryptionSecretName` to the URL query string
    if (getServerEncryptionSecretName() != null) {
      joiner.add(String.format("%sServerEncryptionSecretName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getServerEncryptionSecretName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ServiceName` to the URL query string
    if (getServiceName() != null) {
      joiner.add(String.format("%sServiceName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getServiceName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `StartCommand` to the URL query string
    if (getStartCommand() != null) {
      joiner.add(String.format("%sStartCommand%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartCommand()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

