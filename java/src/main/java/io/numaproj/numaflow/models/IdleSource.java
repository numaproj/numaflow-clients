/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * IdleSource
 */
@JsonPropertyOrder({
  IdleSource.JSON_PROPERTY_INCREMENT_BY,
  IdleSource.JSON_PROPERTY_STEP_INTERVAL,
  IdleSource.JSON_PROPERTY_THRESHOLD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class IdleSource {
  public static final String JSON_PROPERTY_INCREMENT_BY = "incrementBy";
  private String incrementBy = null;

  public static final String JSON_PROPERTY_STEP_INTERVAL = "stepInterval";
  private String stepInterval = null;

  public static final String JSON_PROPERTY_THRESHOLD = "threshold";
  private String threshold = null;

  public IdleSource() { 
  }

  public IdleSource incrementBy(String incrementBy) {
    this.incrementBy = incrementBy;
    return this;
  }

  /**
   * Get incrementBy
   * @return incrementBy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCREMENT_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIncrementBy() {
    return incrementBy;
  }


  @JsonProperty(JSON_PROPERTY_INCREMENT_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncrementBy(String incrementBy) {
    this.incrementBy = incrementBy;
  }


  public IdleSource stepInterval(String stepInterval) {
    this.stepInterval = stepInterval;
    return this;
  }

  /**
   * Get stepInterval
   * @return stepInterval
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STEP_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStepInterval() {
    return stepInterval;
  }


  @JsonProperty(JSON_PROPERTY_STEP_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStepInterval(String stepInterval) {
    this.stepInterval = stepInterval;
  }


  public IdleSource threshold(String threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getThreshold() {
    return threshold;
  }


  @JsonProperty(JSON_PROPERTY_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreshold(String threshold) {
    this.threshold = threshold;
  }


  /**
   * Return true if this IdleSource object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdleSource idleSource = (IdleSource) o;
    return Objects.equals(this.incrementBy, idleSource.incrementBy) &&
        Objects.equals(this.stepInterval, idleSource.stepInterval) &&
        Objects.equals(this.threshold, idleSource.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(incrementBy, stepInterval, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdleSource {\n");
    sb.append("    incrementBy: ").append(toIndentedString(incrementBy)).append("\n");
    sb.append("    stepInterval: ").append(toIndentedString(stepInterval)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `incrementBy` to the URL query string
    if (getIncrementBy() != null) {
      joiner.add(String.format("%sincrementBy%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIncrementBy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `stepInterval` to the URL query string
    if (getStepInterval() != null) {
      joiner.add(String.format("%sstepInterval%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStepInterval()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `threshold` to the URL query string
    if (getThreshold() != null) {
      joiner.add(String.format("%sthreshold%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getThreshold()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

