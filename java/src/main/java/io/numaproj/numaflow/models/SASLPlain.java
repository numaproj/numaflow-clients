/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kubernetes.client.openapi.models.V1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SASLPlain
 */
@JsonPropertyOrder({
  SASLPlain.JSON_PROPERTY_HANDSHAKE,
  SASLPlain.JSON_PROPERTY_PASSWORD_SECRET,
  SASLPlain.JSON_PROPERTY_USER_SECRET
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SASLPlain {
  public static final String JSON_PROPERTY_HANDSHAKE = "handshake";
  private Boolean handshake;

  public static final String JSON_PROPERTY_PASSWORD_SECRET = "passwordSecret";
  private V1SecretKeySelector passwordSecret = null;

  public static final String JSON_PROPERTY_USER_SECRET = "userSecret";
  private V1SecretKeySelector userSecret = null;


  public SASLPlain handshake(Boolean handshake) {
    this.handshake = handshake;
    return this;
  }

   /**
   * Get handshake
   * @return handshake
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_HANDSHAKE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHandshake() {
    return handshake;
  }


  @JsonProperty(JSON_PROPERTY_HANDSHAKE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHandshake(Boolean handshake) {
    this.handshake = handshake;
  }


  public SASLPlain passwordSecret(V1SecretKeySelector passwordSecret) {
    this.passwordSecret = passwordSecret;
    return this;
  }

   /**
   * Get passwordSecret
   * @return passwordSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PASSWORD_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V1SecretKeySelector getPasswordSecret() {
    return passwordSecret;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswordSecret(V1SecretKeySelector passwordSecret) {
    this.passwordSecret = passwordSecret;
  }


  public SASLPlain userSecret(V1SecretKeySelector userSecret) {
    this.userSecret = userSecret;
    return this;
  }

   /**
   * Get userSecret
   * @return userSecret
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_USER_SECRET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public V1SecretKeySelector getUserSecret() {
    return userSecret;
  }


  @JsonProperty(JSON_PROPERTY_USER_SECRET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserSecret(V1SecretKeySelector userSecret) {
    this.userSecret = userSecret;
  }


  /**
   * Return true if this SASLPlain object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SASLPlain saSLPlain = (SASLPlain) o;
    return Objects.equals(this.handshake, saSLPlain.handshake) &&
        Objects.equals(this.passwordSecret, saSLPlain.passwordSecret) &&
        Objects.equals(this.userSecret, saSLPlain.userSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(handshake, passwordSecret, userSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SASLPlain {\n");
    sb.append("    handshake: ").append(toIndentedString(handshake)).append("\n");
    sb.append("    passwordSecret: ").append(toIndentedString(passwordSecret)).append("\n");
    sb.append("    userSecret: ").append(toIndentedString(userSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

