/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * Scale defines the parameters for autoscaling.
 */
@JsonPropertyOrder({
  Scale.JSON_PROPERTY_COOLDOWN_SECONDS,
  Scale.JSON_PROPERTY_DISABLED,
  Scale.JSON_PROPERTY_LOOKBACK_SECONDS,
  Scale.JSON_PROPERTY_MAX,
  Scale.JSON_PROPERTY_MIN,
  Scale.JSON_PROPERTY_REPLICAS_PER_SCALE,
  Scale.JSON_PROPERTY_SCALE_DOWN_COOLDOWN_SECONDS,
  Scale.JSON_PROPERTY_SCALE_UP_COOLDOWN_SECONDS,
  Scale.JSON_PROPERTY_TARGET_BUFFER_AVAILABILITY,
  Scale.JSON_PROPERTY_TARGET_PROCESSING_SECONDS,
  Scale.JSON_PROPERTY_ZERO_REPLICA_SLEEP_SECONDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Scale {
  public static final String JSON_PROPERTY_COOLDOWN_SECONDS = "cooldownSeconds";
  private Long cooldownSeconds;

  public static final String JSON_PROPERTY_DISABLED = "disabled";
  private Boolean disabled;

  public static final String JSON_PROPERTY_LOOKBACK_SECONDS = "lookbackSeconds";
  private Long lookbackSeconds;

  public static final String JSON_PROPERTY_MAX = "max";
  private Integer max;

  public static final String JSON_PROPERTY_MIN = "min";
  private Integer min;

  public static final String JSON_PROPERTY_REPLICAS_PER_SCALE = "replicasPerScale";
  private Long replicasPerScale;

  public static final String JSON_PROPERTY_SCALE_DOWN_COOLDOWN_SECONDS = "scaleDownCooldownSeconds";
  private Long scaleDownCooldownSeconds;

  public static final String JSON_PROPERTY_SCALE_UP_COOLDOWN_SECONDS = "scaleUpCooldownSeconds";
  private Long scaleUpCooldownSeconds;

  public static final String JSON_PROPERTY_TARGET_BUFFER_AVAILABILITY = "targetBufferAvailability";
  private Long targetBufferAvailability;

  public static final String JSON_PROPERTY_TARGET_PROCESSING_SECONDS = "targetProcessingSeconds";
  private Long targetProcessingSeconds;

  public static final String JSON_PROPERTY_ZERO_REPLICA_SLEEP_SECONDS = "zeroReplicaSleepSeconds";
  private Long zeroReplicaSleepSeconds;

  public Scale() { 
  }

  public Scale cooldownSeconds(Long cooldownSeconds) {
    this.cooldownSeconds = cooldownSeconds;
    return this;
  }

  /**
   * Deprecated: Use scaleUpCooldownSeconds and scaleDownCooldownSeconds instead. Cooldown seconds after a scaling operation before another one.
   * @return cooldownSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COOLDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCooldownSeconds() {
    return cooldownSeconds;
  }


  @JsonProperty(JSON_PROPERTY_COOLDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCooldownSeconds(Long cooldownSeconds) {
    this.cooldownSeconds = cooldownSeconds;
  }


  public Scale disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether to disable autoscaling. Set to \&quot;true\&quot; when using Kubernetes HPA or any other 3rd party autoscaling strategies.
   * @return disabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDisabled() {
    return disabled;
  }


  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Scale lookbackSeconds(Long lookbackSeconds) {
    this.lookbackSeconds = lookbackSeconds;
    return this;
  }

  /**
   * Lookback seconds to calculate the average pending messages and processing rate.
   * @return lookbackSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOOKBACK_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getLookbackSeconds() {
    return lookbackSeconds;
  }


  @JsonProperty(JSON_PROPERTY_LOOKBACK_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLookbackSeconds(Long lookbackSeconds) {
    this.lookbackSeconds = lookbackSeconds;
  }


  public Scale max(Integer max) {
    this.max = max;
    return this;
  }

  /**
   * Maximum replicas.
   * @return max
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMax(Integer max) {
    this.max = max;
  }


  public Scale min(Integer min) {
    this.min = min;
    return this;
  }

  /**
   * Minimum replicas.
   * @return min
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMin() {
    return min;
  }


  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMin(Integer min) {
    this.min = min;
  }


  public Scale replicasPerScale(Long replicasPerScale) {
    this.replicasPerScale = replicasPerScale;
    return this;
  }

  /**
   * ReplicasPerScale defines maximum replicas can be scaled up or down at once. The is use to prevent too aggressive scaling operations
   * @return replicasPerScale
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPLICAS_PER_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getReplicasPerScale() {
    return replicasPerScale;
  }


  @JsonProperty(JSON_PROPERTY_REPLICAS_PER_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplicasPerScale(Long replicasPerScale) {
    this.replicasPerScale = replicasPerScale;
  }


  public Scale scaleDownCooldownSeconds(Long scaleDownCooldownSeconds) {
    this.scaleDownCooldownSeconds = scaleDownCooldownSeconds;
    return this;
  }

  /**
   * ScaleDownCooldownSeconds defines the cooldown seconds after a scaling operation, before a follow-up scaling down. It defaults to the CooldownSeconds if not set.
   * @return scaleDownCooldownSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCALE_DOWN_COOLDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getScaleDownCooldownSeconds() {
    return scaleDownCooldownSeconds;
  }


  @JsonProperty(JSON_PROPERTY_SCALE_DOWN_COOLDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScaleDownCooldownSeconds(Long scaleDownCooldownSeconds) {
    this.scaleDownCooldownSeconds = scaleDownCooldownSeconds;
  }


  public Scale scaleUpCooldownSeconds(Long scaleUpCooldownSeconds) {
    this.scaleUpCooldownSeconds = scaleUpCooldownSeconds;
    return this;
  }

  /**
   * ScaleUpCooldownSeconds defines the cooldown seconds after a scaling operation, before a follow-up scaling up. It defaults to the CooldownSeconds if not set.
   * @return scaleUpCooldownSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCALE_UP_COOLDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getScaleUpCooldownSeconds() {
    return scaleUpCooldownSeconds;
  }


  @JsonProperty(JSON_PROPERTY_SCALE_UP_COOLDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScaleUpCooldownSeconds(Long scaleUpCooldownSeconds) {
    this.scaleUpCooldownSeconds = scaleUpCooldownSeconds;
  }


  public Scale targetBufferAvailability(Long targetBufferAvailability) {
    this.targetBufferAvailability = targetBufferAvailability;
    return this;
  }

  /**
   * TargetBufferAvailability is used to define the target percentage of the buffer availability. A valid and meaningful value should be less than the BufferUsageLimit defined in the Edge spec (or Pipeline spec), for example, 50. It only applies to UDF and Sink vertices because only they have buffers to read.
   * @return targetBufferAvailability
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_BUFFER_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getTargetBufferAvailability() {
    return targetBufferAvailability;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_BUFFER_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetBufferAvailability(Long targetBufferAvailability) {
    this.targetBufferAvailability = targetBufferAvailability;
  }


  public Scale targetProcessingSeconds(Long targetProcessingSeconds) {
    this.targetProcessingSeconds = targetProcessingSeconds;
    return this;
  }

  /**
   * TargetProcessingSeconds is used to tune the aggressiveness of autoscaling for source vertices, it measures how fast you want the vertex to process all the pending messages. Typically increasing the value, which leads to lower processing rate, thus less replicas. It&#39;s only effective for source vertices.
   * @return targetProcessingSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_PROCESSING_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getTargetProcessingSeconds() {
    return targetProcessingSeconds;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_PROCESSING_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetProcessingSeconds(Long targetProcessingSeconds) {
    this.targetProcessingSeconds = targetProcessingSeconds;
  }


  public Scale zeroReplicaSleepSeconds(Long zeroReplicaSleepSeconds) {
    this.zeroReplicaSleepSeconds = zeroReplicaSleepSeconds;
    return this;
  }

  /**
   * After scaling down the source vertex to 0, sleep how many seconds before scaling the source vertex back up to peek.
   * @return zeroReplicaSleepSeconds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ZERO_REPLICA_SLEEP_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getZeroReplicaSleepSeconds() {
    return zeroReplicaSleepSeconds;
  }


  @JsonProperty(JSON_PROPERTY_ZERO_REPLICA_SLEEP_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZeroReplicaSleepSeconds(Long zeroReplicaSleepSeconds) {
    this.zeroReplicaSleepSeconds = zeroReplicaSleepSeconds;
  }


  /**
   * Return true if this Scale object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scale scale = (Scale) o;
    return Objects.equals(this.cooldownSeconds, scale.cooldownSeconds) &&
        Objects.equals(this.disabled, scale.disabled) &&
        Objects.equals(this.lookbackSeconds, scale.lookbackSeconds) &&
        Objects.equals(this.max, scale.max) &&
        Objects.equals(this.min, scale.min) &&
        Objects.equals(this.replicasPerScale, scale.replicasPerScale) &&
        Objects.equals(this.scaleDownCooldownSeconds, scale.scaleDownCooldownSeconds) &&
        Objects.equals(this.scaleUpCooldownSeconds, scale.scaleUpCooldownSeconds) &&
        Objects.equals(this.targetBufferAvailability, scale.targetBufferAvailability) &&
        Objects.equals(this.targetProcessingSeconds, scale.targetProcessingSeconds) &&
        Objects.equals(this.zeroReplicaSleepSeconds, scale.zeroReplicaSleepSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cooldownSeconds, disabled, lookbackSeconds, max, min, replicasPerScale, scaleDownCooldownSeconds, scaleUpCooldownSeconds, targetBufferAvailability, targetProcessingSeconds, zeroReplicaSleepSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scale {\n");
    sb.append("    cooldownSeconds: ").append(toIndentedString(cooldownSeconds)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    lookbackSeconds: ").append(toIndentedString(lookbackSeconds)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    replicasPerScale: ").append(toIndentedString(replicasPerScale)).append("\n");
    sb.append("    scaleDownCooldownSeconds: ").append(toIndentedString(scaleDownCooldownSeconds)).append("\n");
    sb.append("    scaleUpCooldownSeconds: ").append(toIndentedString(scaleUpCooldownSeconds)).append("\n");
    sb.append("    targetBufferAvailability: ").append(toIndentedString(targetBufferAvailability)).append("\n");
    sb.append("    targetProcessingSeconds: ").append(toIndentedString(targetProcessingSeconds)).append("\n");
    sb.append("    zeroReplicaSleepSeconds: ").append(toIndentedString(zeroReplicaSleepSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `cooldownSeconds` to the URL query string
    if (getCooldownSeconds() != null) {
      joiner.add(String.format("%scooldownSeconds%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCooldownSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `disabled` to the URL query string
    if (getDisabled() != null) {
      joiner.add(String.format("%sdisabled%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDisabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `lookbackSeconds` to the URL query string
    if (getLookbackSeconds() != null) {
      joiner.add(String.format("%slookbackSeconds%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLookbackSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `max` to the URL query string
    if (getMax() != null) {
      joiner.add(String.format("%smax%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMax()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `min` to the URL query string
    if (getMin() != null) {
      joiner.add(String.format("%smin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `replicasPerScale` to the URL query string
    if (getReplicasPerScale() != null) {
      joiner.add(String.format("%sreplicasPerScale%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReplicasPerScale()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `scaleDownCooldownSeconds` to the URL query string
    if (getScaleDownCooldownSeconds() != null) {
      joiner.add(String.format("%sscaleDownCooldownSeconds%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getScaleDownCooldownSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `scaleUpCooldownSeconds` to the URL query string
    if (getScaleUpCooldownSeconds() != null) {
      joiner.add(String.format("%sscaleUpCooldownSeconds%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getScaleUpCooldownSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `targetBufferAvailability` to the URL query string
    if (getTargetBufferAvailability() != null) {
      joiner.add(String.format("%stargetBufferAvailability%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTargetBufferAvailability()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `targetProcessingSeconds` to the URL query string
    if (getTargetProcessingSeconds() != null) {
      joiner.add(String.format("%stargetProcessingSeconds%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTargetProcessingSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `zeroReplicaSleepSeconds` to the URL query string
    if (getZeroReplicaSleepSeconds() != null) {
      joiner.add(String.format("%szeroReplicaSleepSeconds%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getZeroReplicaSleepSeconds()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

