/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SlidingWindow describes a sliding window
 */
@ApiModel(description = "SlidingWindow describes a sliding window")
@JsonPropertyOrder({
  SlidingWindow.JSON_PROPERTY_LENGTH,
  SlidingWindow.JSON_PROPERTY_SLIDE,
  SlidingWindow.JSON_PROPERTY_STREAMING
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SlidingWindow {
  public static final String JSON_PROPERTY_LENGTH = "length";
  private String length = null;

  public static final String JSON_PROPERTY_SLIDE = "slide";
  private String slide = null;

  public static final String JSON_PROPERTY_STREAMING = "streaming";
  private Boolean streaming;


  public SlidingWindow length(String length) {
    this.length = length;
    return this;
  }

   /**
   * Get length
   * @return length
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLength() {
    return length;
  }


  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLength(String length) {
    this.length = length;
  }


  public SlidingWindow slide(String slide) {
    this.slide = slide;
    return this;
  }

   /**
   * Get slide
   * @return slide
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SLIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSlide() {
    return slide;
  }


  @JsonProperty(JSON_PROPERTY_SLIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlide(String slide) {
    this.slide = slide;
  }


  public SlidingWindow streaming(Boolean streaming) {
    this.streaming = streaming;
    return this;
  }

   /**
   * Streaming should be set to true if the reduce udf is streaming.
   * @return streaming
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Streaming should be set to true if the reduce udf is streaming.")
  @JsonProperty(JSON_PROPERTY_STREAMING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStreaming() {
    return streaming;
  }


  @JsonProperty(JSON_PROPERTY_STREAMING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreaming(Boolean streaming) {
    this.streaming = streaming;
  }


  /**
   * Return true if this SlidingWindow object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlidingWindow slidingWindow = (SlidingWindow) o;
    return Objects.equals(this.length, slidingWindow.length) &&
        Objects.equals(this.slide, slidingWindow.slide) &&
        Objects.equals(this.streaming, slidingWindow.streaming);
  }

  @Override
  public int hashCode() {
    return Objects.hash(length, slide, streaming);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlidingWindow {\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    slide: ").append(toIndentedString(slide)).append("\n");
    sb.append("    streaming: ").append(toIndentedString(streaming)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

