/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.numaproj.numaflow.models.DaemonTemplate;
import io.numaproj.numaflow.models.JobTemplate;
import io.numaproj.numaflow.models.SideInputsManagerTemplate;
import io.numaproj.numaflow.models.VertexTemplate;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * Templates
 */
@JsonPropertyOrder({
  Templates.JSON_PROPERTY_DAEMON,
  Templates.JSON_PROPERTY_JOB,
  Templates.JSON_PROPERTY_SIDE_INPUTS_MANAGER,
  Templates.JSON_PROPERTY_VERTEX
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Templates {
  public static final String JSON_PROPERTY_DAEMON = "daemon";
  private DaemonTemplate daemon;

  public static final String JSON_PROPERTY_JOB = "job";
  private JobTemplate job;

  public static final String JSON_PROPERTY_SIDE_INPUTS_MANAGER = "sideInputsManager";
  private SideInputsManagerTemplate sideInputsManager;

  public static final String JSON_PROPERTY_VERTEX = "vertex";
  private VertexTemplate vertex;

  public Templates() { 
  }

  public Templates daemon(DaemonTemplate daemon) {
    this.daemon = daemon;
    return this;
  }

  /**
   * Get daemon
   * @return daemon
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DAEMON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DaemonTemplate getDaemon() {
    return daemon;
  }


  @JsonProperty(JSON_PROPERTY_DAEMON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDaemon(DaemonTemplate daemon) {
    this.daemon = daemon;
  }


  public Templates job(JobTemplate job) {
    this.job = job;
    return this;
  }

  /**
   * Get job
   * @return job
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JOB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JobTemplate getJob() {
    return job;
  }


  @JsonProperty(JSON_PROPERTY_JOB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJob(JobTemplate job) {
    this.job = job;
  }


  public Templates sideInputsManager(SideInputsManagerTemplate sideInputsManager) {
    this.sideInputsManager = sideInputsManager;
    return this;
  }

  /**
   * Get sideInputsManager
   * @return sideInputsManager
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIDE_INPUTS_MANAGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SideInputsManagerTemplate getSideInputsManager() {
    return sideInputsManager;
  }


  @JsonProperty(JSON_PROPERTY_SIDE_INPUTS_MANAGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSideInputsManager(SideInputsManagerTemplate sideInputsManager) {
    this.sideInputsManager = sideInputsManager;
  }


  public Templates vertex(VertexTemplate vertex) {
    this.vertex = vertex;
    return this;
  }

  /**
   * Get vertex
   * @return vertex
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERTEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public VertexTemplate getVertex() {
    return vertex;
  }


  @JsonProperty(JSON_PROPERTY_VERTEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVertex(VertexTemplate vertex) {
    this.vertex = vertex;
  }


  /**
   * Return true if this Templates object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Templates templates = (Templates) o;
    return Objects.equals(this.daemon, templates.daemon) &&
        Objects.equals(this.job, templates.job) &&
        Objects.equals(this.sideInputsManager, templates.sideInputsManager) &&
        Objects.equals(this.vertex, templates.vertex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daemon, job, sideInputsManager, vertex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Templates {\n");
    sb.append("    daemon: ").append(toIndentedString(daemon)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    sideInputsManager: ").append(toIndentedString(sideInputsManager)).append("\n");
    sb.append("    vertex: ").append(toIndentedString(vertex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `daemon` to the URL query string
    if (getDaemon() != null) {
      joiner.add(getDaemon().toUrlQueryString(prefix + "daemon" + suffix));
    }

    // add `job` to the URL query string
    if (getJob() != null) {
      joiner.add(getJob().toUrlQueryString(prefix + "job" + suffix));
    }

    // add `sideInputsManager` to the URL query string
    if (getSideInputsManager() != null) {
      joiner.add(getSideInputsManager().toUrlQueryString(prefix + "sideInputsManager" + suffix));
    }

    // add `vertex` to the URL query string
    if (getVertex() != null) {
      joiner.add(getVertex().toUrlQueryString(prefix + "vertex" + suffix));
    }

    return joiner.toString();
  }
}

