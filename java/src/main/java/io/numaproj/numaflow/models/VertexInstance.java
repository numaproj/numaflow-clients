/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.numaproj.numaflow.models.Vertex;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * VertexInstance is a wrapper of a vertex instance, which contains the vertex spec and the instance information such as hostname and replica index.
 */
@JsonPropertyOrder({
  VertexInstance.JSON_PROPERTY_HOSTNAME,
  VertexInstance.JSON_PROPERTY_REPLICA,
  VertexInstance.JSON_PROPERTY_VERTEX
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class VertexInstance {
  public static final String JSON_PROPERTY_HOSTNAME = "hostname";
  private String hostname;

  public static final String JSON_PROPERTY_REPLICA = "replica";
  private Integer replica;

  public static final String JSON_PROPERTY_VERTEX = "vertex";
  private Vertex vertex;

  public VertexInstance() { 
  }

  public VertexInstance hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public VertexInstance replica(Integer replica) {
    this.replica = replica;
    return this;
  }

  /**
   * Get replica
   * @return replica
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPLICA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getReplica() {
    return replica;
  }


  @JsonProperty(JSON_PROPERTY_REPLICA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplica(Integer replica) {
    this.replica = replica;
  }


  public VertexInstance vertex(Vertex vertex) {
    this.vertex = vertex;
    return this;
  }

  /**
   * Get vertex
   * @return vertex
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERTEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Vertex getVertex() {
    return vertex;
  }


  @JsonProperty(JSON_PROPERTY_VERTEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVertex(Vertex vertex) {
    this.vertex = vertex;
  }


  /**
   * Return true if this VertexInstance object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VertexInstance vertexInstance = (VertexInstance) o;
    return Objects.equals(this.hostname, vertexInstance.hostname) &&
        Objects.equals(this.replica, vertexInstance.replica) &&
        Objects.equals(this.vertex, vertexInstance.vertex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostname, replica, vertex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VertexInstance {\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    replica: ").append(toIndentedString(replica)).append("\n");
    sb.append("    vertex: ").append(toIndentedString(vertex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `hostname` to the URL query string
    if (getHostname() != null) {
      joiner.add(String.format("%shostname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHostname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `replica` to the URL query string
    if (getReplica() != null) {
      joiner.add(String.format("%sreplica%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReplica()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `vertex` to the URL query string
    if (getVertex() != null) {
      joiner.add(getVertex().toUrlQueryString(prefix + "vertex" + suffix));
    }

    return joiner.toString();
  }
}

