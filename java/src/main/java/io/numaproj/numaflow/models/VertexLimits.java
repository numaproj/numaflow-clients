/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * VertexLimits
 */
@JsonPropertyOrder({
  VertexLimits.JSON_PROPERTY_BUFFER_MAX_LENGTH,
  VertexLimits.JSON_PROPERTY_BUFFER_USAGE_LIMIT,
  VertexLimits.JSON_PROPERTY_READ_BATCH_SIZE,
  VertexLimits.JSON_PROPERTY_READ_TIMEOUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class VertexLimits {
  public static final String JSON_PROPERTY_BUFFER_MAX_LENGTH = "bufferMaxLength";
  private Long bufferMaxLength;

  public static final String JSON_PROPERTY_BUFFER_USAGE_LIMIT = "bufferUsageLimit";
  private Long bufferUsageLimit;

  public static final String JSON_PROPERTY_READ_BATCH_SIZE = "readBatchSize";
  private Long readBatchSize;

  public static final String JSON_PROPERTY_READ_TIMEOUT = "readTimeout";
  private String readTimeout = null;

  public VertexLimits() { 
  }

  public VertexLimits bufferMaxLength(Long bufferMaxLength) {
    this.bufferMaxLength = bufferMaxLength;
    return this;
  }

  /**
   * BufferMaxLength is used to define the max length of a buffer. It overrides the settings from pipeline limits.
   * @return bufferMaxLength
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUFFER_MAX_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getBufferMaxLength() {
    return bufferMaxLength;
  }


  @JsonProperty(JSON_PROPERTY_BUFFER_MAX_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBufferMaxLength(Long bufferMaxLength) {
    this.bufferMaxLength = bufferMaxLength;
  }


  public VertexLimits bufferUsageLimit(Long bufferUsageLimit) {
    this.bufferUsageLimit = bufferUsageLimit;
    return this;
  }

  /**
   * BufferUsageLimit is used to define the percentage of the buffer usage limit, a valid value should be less than 100, for example, 85. It overrides the settings from pipeline limits.
   * @return bufferUsageLimit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUFFER_USAGE_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getBufferUsageLimit() {
    return bufferUsageLimit;
  }


  @JsonProperty(JSON_PROPERTY_BUFFER_USAGE_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBufferUsageLimit(Long bufferUsageLimit) {
    this.bufferUsageLimit = bufferUsageLimit;
  }


  public VertexLimits readBatchSize(Long readBatchSize) {
    this.readBatchSize = readBatchSize;
    return this;
  }

  /**
   * Read batch size from the source or buffer. It overrides the settings from pipeline limits.
   * @return readBatchSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_READ_BATCH_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getReadBatchSize() {
    return readBatchSize;
  }


  @JsonProperty(JSON_PROPERTY_READ_BATCH_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadBatchSize(Long readBatchSize) {
    this.readBatchSize = readBatchSize;
  }


  public VertexLimits readTimeout(String readTimeout) {
    this.readTimeout = readTimeout;
    return this;
  }

  /**
   * Get readTimeout
   * @return readTimeout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_READ_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getReadTimeout() {
    return readTimeout;
  }


  @JsonProperty(JSON_PROPERTY_READ_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadTimeout(String readTimeout) {
    this.readTimeout = readTimeout;
  }


  /**
   * Return true if this VertexLimits object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VertexLimits vertexLimits = (VertexLimits) o;
    return Objects.equals(this.bufferMaxLength, vertexLimits.bufferMaxLength) &&
        Objects.equals(this.bufferUsageLimit, vertexLimits.bufferUsageLimit) &&
        Objects.equals(this.readBatchSize, vertexLimits.readBatchSize) &&
        Objects.equals(this.readTimeout, vertexLimits.readTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bufferMaxLength, bufferUsageLimit, readBatchSize, readTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VertexLimits {\n");
    sb.append("    bufferMaxLength: ").append(toIndentedString(bufferMaxLength)).append("\n");
    sb.append("    bufferUsageLimit: ").append(toIndentedString(bufferUsageLimit)).append("\n");
    sb.append("    readBatchSize: ").append(toIndentedString(readBatchSize)).append("\n");
    sb.append("    readTimeout: ").append(toIndentedString(readTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `bufferMaxLength` to the URL query string
    if (getBufferMaxLength() != null) {
      joiner.add(String.format("%sbufferMaxLength%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBufferMaxLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `bufferUsageLimit` to the URL query string
    if (getBufferUsageLimit() != null) {
      joiner.add(String.format("%sbufferUsageLimit%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBufferUsageLimit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `readBatchSize` to the URL query string
    if (getReadBatchSize() != null) {
      joiner.add(String.format("%sreadBatchSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReadBatchSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `readTimeout` to the URL query string
    if (getReadTimeout() != null) {
      joiner.add(String.format("%sreadTimeout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReadTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

