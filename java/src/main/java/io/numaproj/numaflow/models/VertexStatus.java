/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.Instant;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.numaproj.numaflow.ApiClient;
/**
 * VertexStatus
 */
@JsonPropertyOrder({
  VertexStatus.JSON_PROPERTY_LAST_SCALED_AT,
  VertexStatus.JSON_PROPERTY_MESSAGE,
  VertexStatus.JSON_PROPERTY_PHASE,
  VertexStatus.JSON_PROPERTY_REASON,
  VertexStatus.JSON_PROPERTY_REPLICAS,
  VertexStatus.JSON_PROPERTY_SELECTOR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class VertexStatus {
  public static final String JSON_PROPERTY_LAST_SCALED_AT = "lastScaledAt";
  private java.time.Instant lastScaledAt = null;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_PHASE = "phase";
  private String phase;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public static final String JSON_PROPERTY_REPLICAS = "replicas";
  private Long replicas;

  public static final String JSON_PROPERTY_SELECTOR = "selector";
  private String selector;

  public VertexStatus() { 
  }

  public VertexStatus lastScaledAt(java.time.Instant lastScaledAt) {
    this.lastScaledAt = lastScaledAt;
    return this;
  }

  /**
   * Get lastScaledAt
   * @return lastScaledAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_SCALED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public java.time.Instant getLastScaledAt() {
    return lastScaledAt;
  }


  @JsonProperty(JSON_PROPERTY_LAST_SCALED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastScaledAt(java.time.Instant lastScaledAt) {
    this.lastScaledAt = lastScaledAt;
  }


  public VertexStatus message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public VertexStatus phase(String phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PHASE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPhase() {
    return phase;
  }


  @JsonProperty(JSON_PROPERTY_PHASE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPhase(String phase) {
    this.phase = phase;
  }


  public VertexStatus reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReason(String reason) {
    this.reason = reason;
  }


  public VertexStatus replicas(Long replicas) {
    this.replicas = replicas;
    return this;
  }

  /**
   * Get replicas
   * @return replicas
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPLICAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getReplicas() {
    return replicas;
  }


  @JsonProperty(JSON_PROPERTY_REPLICAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReplicas(Long replicas) {
    this.replicas = replicas;
  }


  public VertexStatus selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Get selector
   * @return selector
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSelector() {
    return selector;
  }


  @JsonProperty(JSON_PROPERTY_SELECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelector(String selector) {
    this.selector = selector;
  }


  /**
   * Return true if this VertexStatus object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VertexStatus vertexStatus = (VertexStatus) o;
    return Objects.equals(this.lastScaledAt, vertexStatus.lastScaledAt) &&
        Objects.equals(this.message, vertexStatus.message) &&
        Objects.equals(this.phase, vertexStatus.phase) &&
        Objects.equals(this.reason, vertexStatus.reason) &&
        Objects.equals(this.replicas, vertexStatus.replicas) &&
        Objects.equals(this.selector, vertexStatus.selector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastScaledAt, message, phase, reason, replicas, selector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VertexStatus {\n");
    sb.append("    lastScaledAt: ").append(toIndentedString(lastScaledAt)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `lastScaledAt` to the URL query string
    if (getLastScaledAt() != null) {
      joiner.add(String.format("%slastScaledAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLastScaledAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `message` to the URL query string
    if (getMessage() != null) {
      joiner.add(String.format("%smessage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMessage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `phase` to the URL query string
    if (getPhase() != null) {
      joiner.add(String.format("%sphase%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPhase()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `reason` to the URL query string
    if (getReason() != null) {
      joiner.add(String.format("%sreason%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReason()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `replicas` to the URL query string
    if (getReplicas() != null) {
      joiner.add(String.format("%sreplicas%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReplicas()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `selector` to the URL query string
    if (getSelector() != null) {
      joiner.add(String.format("%sselector%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSelector()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

