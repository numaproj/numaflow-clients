/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kubernetes.client.openapi.models.V1ContainerPort;
import io.kubernetes.client.openapi.models.V1ContainerResizePolicy;
import io.kubernetes.client.openapi.models.V1EnvFromSource;
import io.kubernetes.client.openapi.models.V1EnvVar;
import io.kubernetes.client.openapi.models.V1Lifecycle;
import io.kubernetes.client.openapi.models.V1Probe;
import io.kubernetes.client.openapi.models.V1ResourceRequirements;
import io.kubernetes.client.openapi.models.V1SecurityContext;
import io.kubernetes.client.openapi.models.V1VolumeDevice;
import io.kubernetes.client.openapi.models.V1VolumeMount;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ContainerBuilder
 */
class ContainerBuilderTest {
    private final ContainerBuilder model = new ContainerBuilder();

    /**
     * Model tests for ContainerBuilder
     */
    @Test
    void testContainerBuilder() {
        // TODO: test ContainerBuilder
    }

    /**
     * Test the property 'args'
     */
    @Test
    void argsTest() {
        // TODO: test args
    }

    /**
     * Test the property 'command'
     */
    @Test
    void commandTest() {
        // TODO: test command
    }

    /**
     * Test the property 'env'
     */
    @Test
    void envTest() {
        // TODO: test env
    }

    /**
     * Test the property 'envFrom'
     */
    @Test
    void envFromTest() {
        // TODO: test envFrom
    }

    /**
     * Test the property 'image'
     */
    @Test
    void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'imagePullPolicy'
     */
    @Test
    void imagePullPolicyTest() {
        // TODO: test imagePullPolicy
    }

    /**
     * Test the property 'lifecycle'
     */
    @Test
    void lifecycleTest() {
        // TODO: test lifecycle
    }

    /**
     * Test the property 'livenessProbe'
     */
    @Test
    void livenessProbeTest() {
        // TODO: test livenessProbe
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'ports'
     */
    @Test
    void portsTest() {
        // TODO: test ports
    }

    /**
     * Test the property 'readinessProbe'
     */
    @Test
    void readinessProbeTest() {
        // TODO: test readinessProbe
    }

    /**
     * Test the property 'resizePolicy'
     */
    @Test
    void resizePolicyTest() {
        // TODO: test resizePolicy
    }

    /**
     * Test the property 'resources'
     */
    @Test
    void resourcesTest() {
        // TODO: test resources
    }

    /**
     * Test the property 'restartPolicy'
     */
    @Test
    void restartPolicyTest() {
        // TODO: test restartPolicy
    }

    /**
     * Test the property 'securityContext'
     */
    @Test
    void securityContextTest() {
        // TODO: test securityContext
    }

    /**
     * Test the property 'startupProbe'
     */
    @Test
    void startupProbeTest() {
        // TODO: test startupProbe
    }

    /**
     * Test the property 'stdin'
     */
    @Test
    void stdinTest() {
        // TODO: test stdin
    }

    /**
     * Test the property 'stdinOnce'
     */
    @Test
    void stdinOnceTest() {
        // TODO: test stdinOnce
    }

    /**
     * Test the property 'terminationMessagePath'
     */
    @Test
    void terminationMessagePathTest() {
        // TODO: test terminationMessagePath
    }

    /**
     * Test the property 'terminationMessagePolicy'
     */
    @Test
    void terminationMessagePolicyTest() {
        // TODO: test terminationMessagePolicy
    }

    /**
     * Test the property 'tty'
     */
    @Test
    void ttyTest() {
        // TODO: test tty
    }

    /**
     * Test the property 'volumeDevices'
     */
    @Test
    void volumeDevicesTest() {
        // TODO: test volumeDevices
    }

    /**
     * Test the property 'volumeMounts'
     */
    @Test
    void volumeMountsTest() {
        // TODO: test volumeMounts
    }

    /**
     * Test the property 'workingDir'
     */
    @Test
    void workingDirTest() {
        // TODO: test workingDir
    }

}
