/*
 * Numaflow
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.numaproj.numaflow.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kubernetes.client.openapi.models.V1Affinity;
import io.kubernetes.client.openapi.models.V1Container;
import io.kubernetes.client.openapi.models.V1LocalObjectReference;
import io.kubernetes.client.openapi.models.V1PodDNSConfig;
import io.kubernetes.client.openapi.models.V1PodSecurityContext;
import io.kubernetes.client.openapi.models.V1Toleration;
import io.kubernetes.client.openapi.models.V1Volume;
import io.numaproj.numaflow.models.CombinedEdge;
import io.numaproj.numaflow.models.ContainerTemplate;
import io.numaproj.numaflow.models.Metadata;
import io.numaproj.numaflow.models.Scale;
import io.numaproj.numaflow.models.Sink;
import io.numaproj.numaflow.models.Source;
import io.numaproj.numaflow.models.UDF;
import io.numaproj.numaflow.models.VertexLimits;
import io.numaproj.numaflow.models.Watermark;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for VertexSpec
 */
class VertexSpecTest {
    private final VertexSpec model = new VertexSpec();

    /**
     * Model tests for VertexSpec
     */
    @Test
    void testVertexSpec() {
        // TODO: test VertexSpec
    }

    /**
     * Test the property 'affinity'
     */
    @Test
    void affinityTest() {
        // TODO: test affinity
    }

    /**
     * Test the property 'automountServiceAccountToken'
     */
    @Test
    void automountServiceAccountTokenTest() {
        // TODO: test automountServiceAccountToken
    }

    /**
     * Test the property 'containerTemplate'
     */
    @Test
    void containerTemplateTest() {
        // TODO: test containerTemplate
    }

    /**
     * Test the property 'dnsConfig'
     */
    @Test
    void dnsConfigTest() {
        // TODO: test dnsConfig
    }

    /**
     * Test the property 'dnsPolicy'
     */
    @Test
    void dnsPolicyTest() {
        // TODO: test dnsPolicy
    }

    /**
     * Test the property 'fromEdges'
     */
    @Test
    void fromEdgesTest() {
        // TODO: test fromEdges
    }

    /**
     * Test the property 'imagePullSecrets'
     */
    @Test
    void imagePullSecretsTest() {
        // TODO: test imagePullSecrets
    }

    /**
     * Test the property 'initContainerTemplate'
     */
    @Test
    void initContainerTemplateTest() {
        // TODO: test initContainerTemplate
    }

    /**
     * Test the property 'initContainers'
     */
    @Test
    void initContainersTest() {
        // TODO: test initContainers
    }

    /**
     * Test the property 'interStepBufferServiceName'
     */
    @Test
    void interStepBufferServiceNameTest() {
        // TODO: test interStepBufferServiceName
    }

    /**
     * Test the property 'limits'
     */
    @Test
    void limitsTest() {
        // TODO: test limits
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nodeSelector'
     */
    @Test
    void nodeSelectorTest() {
        // TODO: test nodeSelector
    }

    /**
     * Test the property 'partitions'
     */
    @Test
    void partitionsTest() {
        // TODO: test partitions
    }

    /**
     * Test the property 'pipelineName'
     */
    @Test
    void pipelineNameTest() {
        // TODO: test pipelineName
    }

    /**
     * Test the property 'priority'
     */
    @Test
    void priorityTest() {
        // TODO: test priority
    }

    /**
     * Test the property 'priorityClassName'
     */
    @Test
    void priorityClassNameTest() {
        // TODO: test priorityClassName
    }

    /**
     * Test the property 'replicas'
     */
    @Test
    void replicasTest() {
        // TODO: test replicas
    }

    /**
     * Test the property 'runtimeClassName'
     */
    @Test
    void runtimeClassNameTest() {
        // TODO: test runtimeClassName
    }

    /**
     * Test the property 'scale'
     */
    @Test
    void scaleTest() {
        // TODO: test scale
    }

    /**
     * Test the property 'securityContext'
     */
    @Test
    void securityContextTest() {
        // TODO: test securityContext
    }

    /**
     * Test the property 'serviceAccountName'
     */
    @Test
    void serviceAccountNameTest() {
        // TODO: test serviceAccountName
    }

    /**
     * Test the property 'sideInputs'
     */
    @Test
    void sideInputsTest() {
        // TODO: test sideInputs
    }

    /**
     * Test the property 'sideInputsContainerTemplate'
     */
    @Test
    void sideInputsContainerTemplateTest() {
        // TODO: test sideInputsContainerTemplate
    }

    /**
     * Test the property 'sidecars'
     */
    @Test
    void sidecarsTest() {
        // TODO: test sidecars
    }

    /**
     * Test the property 'sink'
     */
    @Test
    void sinkTest() {
        // TODO: test sink
    }

    /**
     * Test the property 'source'
     */
    @Test
    void sourceTest() {
        // TODO: test source
    }

    /**
     * Test the property 'toEdges'
     */
    @Test
    void toEdgesTest() {
        // TODO: test toEdges
    }

    /**
     * Test the property 'tolerations'
     */
    @Test
    void tolerationsTest() {
        // TODO: test tolerations
    }

    /**
     * Test the property 'udf'
     */
    @Test
    void udfTest() {
        // TODO: test udf
    }

    /**
     * Test the property 'volumes'
     */
    @Test
    void volumesTest() {
        // TODO: test volumes
    }

    /**
     * Test the property 'watermark'
     */
    @Test
    void watermarkTest() {
        // TODO: test watermark
    }

}
